name: CI
env:
  DEBUG: napi:*
  APP_NAME: ngrok
  MACOSX_DEPLOYMENT_TARGET: '10.13'
on:
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'
    paths-ignore:
      - '**/*.md'
      - LICENSE
      - '**/*.gitignore'
      - .editorconfig
      - docs/**
  pull_request:
    types: [opened, reopened] # when a pull request is opened or reopened
    branches:
      - main # the branch that the pull request is targeting
jobs:
  udeps:
    name: Udeps
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: jrobsonchase/direnv-action@v0.7
      - uses: ./.github/workflows/rust-cache
      - uses: actions-rs/cargo@v1
        with:
          command: udeps
          args: '--workspace --all-targets --all-features'
  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: jrobsonchase/direnv-action@v0.7
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: '--all -- --check'
  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: jrobsonchase/direnv-action@v0.7
      - uses: ./.github/workflows/rust-cache
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: '--all-targets --all-features --workspace -- -D warnings'
  build:
    uses: ./.github/workflows/build.yml
    with:
      app-name: ngrok
      build: ${{ matrix.settings.build }}
      docker: ${{ matrix.settings.docker }}
      host: ${{ matrix.settings.host }}
      if: ${{ matrix.settings.if || true }}
      setup: ${{ matrix.settings.setup }}
      target: ${{ matrix.settings.target }}
    strategy:
      fail-fast: false
      matrix:
        settings:
          # - host: macos-latest
          #   target: x86_64-apple-darwin
          #   build: yarn build
          # - host: windows-latest
          #   build: yarn build
          #   target: x86_64-pc-windows-msvc
          # - host: windows-latest
          #   build: |
          #     yarn build --target i686-pc-windows-msvc
          #   target: i686-pc-windows-msvc
          # - host: ubuntu-latest
          #   target: x86_64-unknown-linux-gnu
          #   docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
          #   build: yarn build --target x86_64-unknown-linux-gnu
          # - host: ubuntu-latest
          #   target: x86_64-unknown-linux-musl
          #   if: ${{ github.ref == 'refs/heads/main' }}
          #   docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
          #   build: |
          #     sudo apt-get update &&
          #     sudo apt-get install -y musl-tools musl-dev gcc-multilib &&
          #     rustup target add x86_64-unknown-linux-musl &&
          #     wget https://ziglang.org/download/0.10.0/zig-linux-x86_64-0.10.0.tar.xz &&
          #     mkdir -p $HOME/zig &&
          #     tar -xf zig-linux-x86_64-0.10.0.tar.xz -C $HOME/zig --strip-components=1 &&
          #     export CC="clang" &&
          #     export CXX="clang++" &&
          #     export RUSTFLAGS="-C target-feature=-crt-static" &&
          #     export CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER=clang &&
          #     export PATH="$HOME/zig:$PATH" &&
          #     yarn build --target x86_64-unknown-linux-musl
          # - host: macos-latest
          #   target: aarch64-apple-darwin
          #   if: ${{ github.ref == 'refs/heads/main' }}
          #   build: yarn build --target aarch64-apple-darwin
          # - host: ubuntu-latest
          #   target: aarch64-unknown-linux-gnu
          #   if: ${{ github.ref == 'refs/heads/main' }}
          #   docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
          #   build: |
          #     sudo apt-get update
          #     sudo apt-get install -y gcc-aarch64-linux-gnu 
          #     export CFLAGS="$CFLAGS -D__GLIBC_USE(IEC_60559_BFP_EXT_C2X)=1" &&
          #     yarn build --target aarch64-unknown-linux-gnu
          # - host: ubuntu-latest
          #   target: armv7-unknown-linux-gnueabihf
          #   if: ${{ github.ref == 'refs/heads/main' }}
          #   setup: |
          #     sudo apt-get update
          #     sudo apt-get install gcc-arm-linux-gnueabihf -y
          #   build: yarn build --target=armv7-unknown-linux-gnueabihf
          # - host: ubuntu-latest
          #   target: aarch64-linux-android
          #   if: ${{ github.ref == 'refs/heads/main' }}
          #   build: yarn build --target aarch64-linux-android
          - host: ubuntu-latest
            target: armv7-linux-androideabi
            if: ${{ github.ref == 'refs/heads/main' }}
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            build: |
              apt-get update &&
              apt-get install -y wget unzip &&
              wget https://dl.google.com/android/repository/android-ndk-r25c-linux.zip &&
              unzip android-ndk-r25c-linux.zip &&
              export ANDROID_NDK_HOME=$PWD/android-ndk-r25c &&
              export TOOLCHAIN=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64 &&
              export PATH=$TOOLCHAIN/bin:$PATH &&
              export AR=$TOOLCHAIN/bin/llvm-ar &&
              export CC=$TOOLCHAIN/bin/armv7a-linux-androideabi21-clang &&
              export CXX=$TOOLCHAIN/bin/armv7a-linux-androideabi21-clang++ &&
              export LD=$TOOLCHAIN/bin/ld.lld &&
              export RANLIB=$TOOLCHAIN/bin/llvm-ranlib &&
              export STRIP=$TOOLCHAIN/bin/llvm-strip &&
              export SYSROOT=$TOOLCHAIN/sysroot &&
              export CFLAGS="--target=armv7a-linux-androideabi21 --sysroot=$SYSROOT" &&
              export CXXFLAGS="--target=armv7a-linux-androideabi21 --sysroot=$SYSROOT" &&
              export LDFLAGS="--target=armv7a-linux-androideabi21 --sysroot=$SYSROOT" &&
              export CARGO_TARGET_ARMV7_LINUX_ANDROIDEABI_LINKER=$CC &&
              export CARGO_TARGET_ARMV7_LINUX_ANDROIDEABI_RUSTFLAGS="-C link-arg=--sysroot=$SYSROOT" &&
              rustup target add armv7-linux-androideabi &&
              yarn build --target armv7-linux-androideabi
          # - host: ubuntu-latest
          #   target: aarch64-unknown-linux-musl
          #   if: ${{ github.ref == 'refs/heads/main' }}
          #   docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
          #   build: |
          #     apk add clang18 llvm18
          #     ln -s /usr/lib/llvm-18/lib/libclang.so.1 /usr/lib/libclang.so
          #     rustup target add aarch64-unknown-linux-musl
          #     export CC_aarch64_unknown_linux_musl=aarch64-linux-musl-gcc
          #     export CXX_aarch64_unknown_linux_musl=aarch64-linux-musl-g++
          #     export AR_aarch64_unknown_linux_musl=aarch64-linux-musl-ar
          #     export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=aarch64-linux-musl-gcc
          #     export RUSTFLAGS="-C linker=aarch64-linux-musl-gcc"
          #     yarn build --target aarch64-unknown-linux-musl
          # - host: windows-latest
          #   target: aarch64-pc-windows-msvc
          #   build: yarn build --target aarch64-pc-windows-msvc
  build-freebsd:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    name: Build FreeBSD
    steps:
      - uses: actions/checkout@v4
      - name: Build
        id: build
        uses: vmactions/freebsd-vm@v1
        env:
          DEBUG: napi:*
          RUSTUP_HOME: /usr/local/rustup
          CARGO_HOME: /usr/local/cargo
          RUSTUP_IO_THREADS: 1
        with:
          envs: DEBUG RUSTUP_HOME CARGO_HOME RUSTUP_IO_THREADS
          usesh: true
          mem: 3000
          prepare: |
            pkg install -y -f curl node libnghttp2
            alias curl="curl --retry 5 --retry-all-errors"
            curl -qL https://www.npmjs.com/install.sh | sh
            npm install --location=global --ignore-scripts yarn
            curl https://sh.rustup.rs -sSf --output rustup.sh
            sh rustup.sh -y --profile minimal --default-toolchain beta
            export PATH="/usr/local/cargo/bin:$PATH"
            echo "~~~~ rustc --version ~~~~"
            rustc --version
            echo "~~~~ node -v ~~~~"
            node -v
            echo "~~~~ yarn --version ~~~~"
            yarn --version
          run: |
            export PATH="/usr/local/cargo/bin:$PATH"
            pwd
            ls -lah
            whoami
            env
            freebsd-version
            yarn install
            yarn build
            strip -x *.node
            NGROK_AUTHTOKEN=${{ secrets.NGROK_AUTHTOKEN }} yarn test -m smoke
            rm -rf examples
            rm -rf node.core
            rm -rf node_modules
            rm -rf target
            rm -rf .yarn/cache
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-freebsd
          path: ${{ env.APP_NAME }}.*.node
          if-no-files-found: error
  test-macOS-windows-binding:
    name: Test bindings on ${{ matrix.settings.target }} - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
          - host: windows-latest
            target: x86_64-pc-windows-msvc
        node:
          - '18'
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: yarn

      - name: Install dependencies
        run: yarn install

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: .

      - name: List packages
        run: ls -R .
        shell: bash

      - name: Test bindings
        env:
          NGROK_AUTHTOKEN: ${{ secrets.NGROK_AUTHTOKEN }}
        run: |
          yarn test -m smoke

  test-linux-x64-gnu-binding:
    name: Test bindings on Linux-x64-gnu - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node:
          - '18'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: yarn

      - name: Install dependencies
        run: yarn install

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-x86_64-unknown-linux-gnu
          path: .

      - name: List packages
        run: ls -R .
        shell: bash

      - name: Test bindings
        run: docker run -e NGROK_AUTHTOKEN=${{ secrets.NGROK_AUTHTOKEN }} --mount type=bind,src=/etc/ssl,dst=/etc/ssl --rm -v $(pwd):/build -w /build node:${{ matrix.node }}-slim yarn test -m smoke

      - name: Full Test Suite
        # run full suite of online tests
        run: docker run -e NGROK_AUTHTOKEN=${{ secrets.NGROK_AUTHTOKEN }} --mount type=bind,src=/etc/ssl,dst=/etc/ssl --rm -v $(pwd):/build -w /build node:${{ matrix.node }}-slim yarn test

  test-linux-x64-musl-binding:
    if: github.ref == 'refs/heads/main'
    name: Test bindings on x86_64-unknown-linux-musl - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node:
          - '18'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: yarn

      - name: Install dependencies
        run: |
          yarn config set supportedArchitectures.libc "musl"
          yarn install

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-x86_64-unknown-linux-musl
          path: .

      - name: List packages
        run: ls -R .
        shell: bash

      - name: Test bindings
        run: docker run -e NGROK_AUTHTOKEN=${{ secrets.NGROK_AUTHTOKEN }} --rm -v $(pwd):/build -w /build node:${{ matrix.node }}-alpine yarn test -m smoke

  test-linux-aarch64-gnu-binding:
    if: github.ref == 'refs/heads/main'
    name: Test bindings on aarch64-unknown-linux-gnu - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node:
          - '18'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-aarch64-unknown-linux-gnu
          path: .

      - name: List packages
        run: ls -R .
        shell: bash

      - name: Install dependencies
        run: |
          yarn config set supportedArchitectures.cpu "arm64"
          yarn config set supportedArchitectures.libc "glibc"
          yarn install

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
     
      - name: Setup and run tests
        uses: addnab/docker-run-action@v3
        with:
          image: node:${{ matrix.node }}-slim
          options: '--platform linux/arm64 -v ${{ github.workspace }}:/build -w /build'
          run: |
            set -e
            NGROK_AUTHTOKEN=${{ secrets.NGROK_AUTHTOKEN }} yarn test -m smoke
            ls -la

  test-linux-aarch64-musl-binding:
    if: github.ref == 'refs/heads/main'
    name: Test bindings on aarch64-unknown-linux-musl - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node:
          - '18'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-aarch64-unknown-linux-musl
          path: .
      
      - name: List packages
        run: ls -R .
        shell: bash

      - name: Install dependencies
        run: |
          yarn config set supportedArchitectures.cpu "arm64"
          yarn config set supportedArchitectures.libc "musl"
          yarn install

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      
      - name: Setup and run tests
        uses: addnab/docker-run-action@v3
        with:
          image: node:lts-alpine
          options: '--platform linux/arm64 -v ${{ github.workspace }}:/build -w /build'
          run: |
            set -e
            NGROK_AUTHTOKEN=${{ secrets.NGROK_AUTHTOKEN }} yarn test -m smoke

  test-linux-arm-gnueabihf-binding:
    if: github.ref == 'refs/heads/main'
    name: Test bindings on armv7-unknown-linux-gnueabihf - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node:
          - '18'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-armv7-unknown-linux-gnueabihf
          path: .

      - name: List packages
        run: ls -R .
        shell: bash

      - name: Install dependencies
        run: |
          yarn config set supportedArchitectures.cpu "arm"
          yarn install

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm
      - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      
      - name: Setup and run tests
        uses: addnab/docker-run-action@v3
        with:
          image: node:${{matrix.node}}-bullseye-slim
          options: '--platform linux/arm/v7 -v ${{ github.workspace }}:/build -w /build'
          run: |
            set -e
            NGROK_AUTHTOKEN=${{ secrets.NGROK_AUTHTOKEN }} yarn test -m smoke
            ls -la

  universal-macOS:
    if: github.ref == 'refs/heads/main'
    name: Build universal macOS binary
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node:
          - '18'
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: yarn

      - name: Install dependencies
        run: yarn install
        
      - name: Download macOS x64 artifact
        uses: actions/download-artifact@v4
        with:
          name: bindings-x86_64-apple-darwin
          path: artifacts
      - name: Download macOS arm64 artifact
        uses: actions/download-artifact@v4
        with:
          name: bindings-aarch64-apple-darwin
          path: artifacts

      - name: Combine binaries
        run: yarn universal

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-universal-apple-darwin
          path: ${{ env.APP_NAME }}.*.node
          if-no-files-found: error

  publish:
    if: github.ref == 'refs/heads/main' && github.repository == 'ngrok/ngrok-javascript'
    name: Publish
    runs-on: ubuntu-latest
    needs:
      - udeps
      - fmt
      - clippy
      - build-freebsd
      - test-macOS-windows-binding
      - test-linux-x64-gnu-binding
      - test-linux-x64-musl-binding
      - test-linux-aarch64-gnu-binding
      - test-linux-aarch64-musl-binding
      - test-linux-arm-gnueabihf-binding
      - universal-macOS
    steps:
      - uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: yarn

      - name: Install dependencies
        run: yarn install

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Move artifacts
        run: yarn artifacts

      - name: List packages
        run: ls -R ./npm
        shell: bash

      - name: Publish
        run: |
          echo "git log:"
          git log -1 --pretty=%B
          if git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+$";
          then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --access public
          elif git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+";
          then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --tag next --access public
          else
            echo "Not a release, skipping publish"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

name: Publish All
on:
  pull_request:
    branches: [main]

jobs:
  publish:
    if: github.repository == 'ngrok/ngrok-javascript'
    name: Publish
    uses: ./.github/workflows/build.yml
    with:
      app-name: ngrok
      build: ${{ matrix.settings.build }}
      docker: ${{ matrix.settings.docker }}
      host: ${{ matrix.settings.host }}
      if: ${{ matrix.settings.if || true }}
      setup: ${{ matrix.settings.setup }}
      target: ${{ matrix.settings.target }}
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: |
              rustup target add x86_64-apple-darwin
              yarn build --target x86_64-apple-darwin
          - host: windows-latest
            build: yarn build
            target: x86_64-pc-windows-msvc
          - host: windows-latest
            build: |
              yarn build --target i686-pc-windows-msvc
            target: i686-pc-windows-msvc
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            build: yarn build --target x86_64-unknown-linux-gnu
          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            if: ${{ github.ref == 'refs/heads/main' }}
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            build: |
              apk add musl-dev gcc make cmake clang llvm build-base
              rustup target add x86_64-unknown-linux-musl
              export CARGO_BUILD_TARGET="x86_64-unknown-linux-musl"
              ln -s /usr/lib/gcc/x86_64-alpine-linux-musl/14.2.0/crtbeginS.o /usr/lib
              ln -s /usr/lib/gcc/x86_64-alpine-linux-musl/14.2.0/crtendS.o /usr/lib
              ln -s /usr/lib/gcc/x86_64-alpine-linux-musl/14.2.0/libgcc.a /usr/lib
              yarn build --target x86_64-unknown-linux-musl
          - host: macos-latest
            target: aarch64-apple-darwin
            if: ${{ github.ref == 'refs/heads/main' }}
            build: yarn build --target aarch64-apple-darwin
          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            if: ${{ github.ref == 'refs/heads/main' }}
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
            build: |
              sudo apt-get update
              sudo apt-get install -y gcc-aarch64-linux-gnu 
              export CFLAGS="$CFLAGS -D__GLIBC_USE(IEC_60559_BFP_EXT_C2X)=1" &&
              yarn build --target aarch64-unknown-linux-gnu
          - host: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            if: ${{ github.ref == 'refs/heads/main' }}
            setup: |
              sudo apt-get update
              sudo apt-get install gcc-arm-linux-gnueabihf -y
            build: yarn build --target=armv7-unknown-linux-gnueabihf
          - host: ubuntu-latest
            target: aarch64-linux-android
            if: ${{ github.ref == 'refs/heads/main' }}
            build: yarn build --target aarch64-linux-android
          - host: ubuntu-latest
            target: aarch64-unknown-linux-musl
            if: ${{ github.ref == 'refs/heads/main' }}
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            build: |
              apk add clang18 llvm18
              ln -s /usr/lib/llvm-18/lib/libclang.so.1 /usr/lib/libclang.so
              rustup target add aarch64-unknown-linux-musl
              export CC_aarch64_unknown_linux_musl=aarch64-linux-musl-gcc
              export CXX_aarch64_unknown_linux_musl=aarch64-linux-musl-g++
              export AR_aarch64_unknown_linux_musl=aarch64-linux-musl-ar
              yarn build --target aarch64-unknown-linux-musl
          - host: windows-latest
            target: aarch64-pc-windows-msvc
            build: yarn build --target aarch64-pc-windows-msvc
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: yarn

      - name: Install dependencies
        run: yarn install

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Move artifacts
        run: yarn artifacts

      - name: List packages
        run: ls -R ./npm
        shell: bash

      - name: Publish
        run: |
          # extract version from Cargo.toml
          version=$(grep '^version =' Cargo.toml | sed -E 's/version = "(.*)"/\1/')
          echo "Package version: $version"
          npm publish --access public
          # check version variable and publish accordingly
          if [[ "$version" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --access public
          elif [[ "$version" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --tag next --access public
          else
            echo "Not a release, skipping publish"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
    
      - name: Tag Release
        run: |
          git config user.name "GitHub Action"
          git config user.email noreply@ngrok.com
          version=$(grep '^version =' Cargo.toml | sed -E 's/version = "(.*)"/\1/')
          tag="v$version"
          echo "Tagging release: $tag"
          echo "Fetching all tags in the repository"
          git fetch --tags
          if git rev-parse "$tag" > /dev/null 2>&1; then
            echo "Tag $tag already exists, skipping tag creation."
          else
            echo "Tag $tag does not exist, pushing tag."
            git tag -a -m "Version ${version}" $tag
            git push --tags
          fi
